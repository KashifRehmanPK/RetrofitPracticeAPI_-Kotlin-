package com.neonstudio.retrofitpractice_api

import android.app.ProgressDialog
import android.os.Bundle
import android.util.Log
import android.widget.Toast
import androidx.activity.enableEdgeToEdge
import androidx.appcompat.app.AppCompatActivity
import androidx.core.view.ViewCompat
import androidx.core.view.WindowInsetsCompat
import com.neonstudio.retrofitpractice_api.databinding.ActivityMainBinding
import retrofit2.Call
import retrofit2.Callback
import retrofit2.Response
import retrofit2.Retrofit

class MainActivity : AppCompatActivity() {

    lateinit var binding:ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        enableEdgeToEdge()

        binding= ActivityMainBinding.inflate(layoutInflater)
        //setContentView(R.layout.activity_main)
        setContentView(binding.root)

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main)) { v, insets ->
            val systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars())
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom)
            insets
        }


        //https://jsonplaceholder.typicode.com/todos/1


        binding.btnGet.setOnClickListener{
            getData()

        }


        binding.btnPost.setOnClickListener {
            postData()
        }


        binding.btnPut.setOnClickListener {
            putData()
        }

        binding.btndelete.setOnClickListener {
            deleteData()
        }


    }




    private fun getData() {

        //progressbar
        val progressDialog = ProgressDialog(this)
        progressDialog.setMessage ("Please wait while data is fetch")
        progressDialog.show()


        RetrofitInstance.apiInterface.getData().enqueue(object : Callback<ResponseModelClass?> {
            override fun onResponse(
                call: Call<ResponseModelClass?>,
                response: Response<ResponseModelClass?>
            ) {
                binding.memeTitle.text=response.body()?.title

                progressDialog.dismiss()
            }

            override fun onFailure(call: Call<ResponseModelClass?>, t: Throwable) {
                Toast.makeText(this@MainActivity,"${t.localizedMessage}",Toast.LENGTH_SHORT).show()
                progressDialog.dismiss()
            }
        })
    }




    private fun postData() {


        val postItem = ResponsePostModelClassItem(
            body = "This is the body of the post",
            id = 0, // The ID will be generated by the API, so it's usually set to 0 or ignored.
            title = "Sample Title",
            userId = 1 // Assuming userId is 1, change this as per your need
        )

        //progressbar
        val progressDialog = ProgressDialog(this)
        progressDialog.setMessage ("Please wait while data is being posted")
        progressDialog.show()



        RetrofitInstance.apiInterface.createPostItem(postItem).enqueue(object : Callback<ResponsePostModelClassItem?> {
            override fun onResponse(
                call: Call<ResponsePostModelClassItem?>,
                response: Response<ResponsePostModelClassItem?>
            ) {
                progressDialog.dismiss()
                if (response.isSuccessful) {
                    // Log the status code
                    val statusCode = response.code()
                    Log.d("Post Status", "Success! Status code: ${response.body()}")
                    Log.d("Post Status", "Success! Status code: $statusCode")
                    Log.d("Post Status", "Success! Status code: ${response.message()}")

                    Toast.makeText(this@MainActivity,"Success! Status code: $statusCode",Toast.LENGTH_SHORT).show()

                } else {
                    Toast.makeText(this@MainActivity,"Failed! Status code: ${response.code()}",Toast.LENGTH_SHORT).show()

                    Log.d("Post Status", "Failed! Status code: ${response.code()}")
                }
            }





            override fun onFailure(call: Call<ResponsePostModelClassItem?>, t: Throwable) {
                Toast.makeText(this@MainActivity,""+ t.message.toString(),Toast.LENGTH_SHORT).show()
                progressDialog.dismiss()
                Log.e("Post Status", t.message.toString())
            }
        })
    }



    private fun putData() {


        val postItem = ResponsePostModelClassItem(
            body = "This is the body of the post",
            id = 42, // The ID will be generated by the API, so it's usually set to 0 or ignored.
            title = "Sample Title",
            userId = 5 // Assuming userId is 1, change this as per your need
        )

        //progressbar
        val progressDialog = ProgressDialog(this)
        progressDialog.setMessage ("Please wait while data is being posted")
        progressDialog.show()



        RetrofitInstance.apiInterface.updateItem(42, postItem).enqueue(object : Callback<ResponsePostModelClassItem?> {
            override fun onResponse(
                call: Call<ResponsePostModelClassItem?>,
                response: Response<ResponsePostModelClassItem?>
            ) {
                progressDialog.dismiss()
                if (response.isSuccessful) {
                    // Log the status code
                    val statusCode = response.code()
                    Log.d("Status code", "Success! Status code: ${response.body()}")
                    Log.d("Status code", "Success! Status code: $statusCode")
                    Log.d("Status code", "Success! Status code: ${response.message()}")

                    Toast.makeText(this@MainActivity,"Success! Status code: $statusCode",Toast.LENGTH_SHORT).show()

                } else {
                    Toast.makeText(this@MainActivity,"Failed! Status code: ${response.code()}",Toast.LENGTH_SHORT).show()

                    Log.d("Post Status", "Failed! Status code: ${response.code()}")
                }
            }





            override fun onFailure(call: Call<ResponsePostModelClassItem?>, t: Throwable) {
                Toast.makeText(this@MainActivity,""+ t.message.toString(),Toast.LENGTH_SHORT).show()
                progressDialog.dismiss()
                Log.e("Post Status", t.message.toString())
            }
        })



    }

    private fun deleteData() {

//        val postItem = ResponsePostModelClassItem(
//            body = "This is the body of the post",
//            id = 42, // The ID will be generated by the API, so it's usually set to 0 or ignored.
//            title = "Sample Title",
//            userId = 5 // Assuming userId is 1, change this as per your need
//        )

        //progressbar
        val progressDialog = ProgressDialog(this)
        progressDialog.setMessage ("Please wait while data is being posted")
        progressDialog.show()



        RetrofitInstance.apiInterface.deleteItem(42).enqueue(object : Callback<ResponsePostModelClassItem?> {
            override fun onResponse(
                call: Call<ResponsePostModelClassItem?>,
                response: Response<ResponsePostModelClassItem?>
            ) {
                progressDialog.dismiss()
                if (response.isSuccessful) {
                    // Log the status code
                    val statusCode = response.code()
                    Log.d("Status code", "Success! Status code: ${response.body()}")
                    Log.d("Status code", "Success! Status code: $statusCode")
                    Log.d("Status code", "Success! Status code: ${response.message()}")

                    Toast.makeText(this@MainActivity,"Success! Status code: $statusCode",Toast.LENGTH_SHORT).show()

                } else {
                    Toast.makeText(this@MainActivity,"Failed! Status code: ${response.code()}",Toast.LENGTH_SHORT).show()

                    Log.d("Post Status", "Failed! Status code: ${response.code()}")
                }
            }





            override fun onFailure(call: Call<ResponsePostModelClassItem?>, t: Throwable) {
                Toast.makeText(this@MainActivity,""+ t.message.toString(),Toast.LENGTH_SHORT).show()
                progressDialog.dismiss()
                Log.e("Post Status", t.message.toString())
            }
        })
    }




}